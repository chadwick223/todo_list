/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */

  const express = require('express');
  const bodyParser = require('body-parser');
  const { v4: uuidv4 } = require('uuid');
  
  const app = express();
  
  app.use(bodyParser.json());
  let nextId =1;
  
  const todos = [
      { id: nextId++, task: 'buy groceries', completed: false,description:'i should buy some grocery' },
      { id: nextId++, task: 'finish homework', completed: false ,description:'i should complete my homework'},
      { id: nextId++, task: 'call mom', completed: false,description:'i should call mom' }
  ];
  
  app.get('/todos', function(req, res) {
      res.status(200).json(todos);
  });
  
  app.get('/todos/:id', function(req, res) {
      const todoID = req.params.id*1;
      const selectedTodo = todos.find(function(item) {
          return item.id === todoID;
      });
      if (selectedTodo) {
          res.status(200).json(selectedTodo);
      } else {
          res.status(404).json('Todo item not found');
      }
  });
  app.post('/todos',function(req,res){
    todos.push({
      id:nextId++,
      task:'play games',
      completed: false,
      description:'i should play some games'
    });
    res.status(201).json('todo item created with id');

    
  });
  app.put('/todos/:id',function(req,res){
    const todoId=req.params.id*1;
    const selectedTodo=todos.find(function(item){
      return item.id===todoId;
    });
    if(selectedTodo!== undefined){
      selectedTodo.completed=true;
      res.status(200).json({message:'Todo item updated successfully'})
    }
    else {
      res.status(404).json({message:'todo item not found'});
    }
  });
  app.delete('/todos/:id',function(req,res){
    const todoId=req.params.id*1;
    const selectedTodo=todos.find(function(item){
      return item.id===todoId;
    });
    if(selectedTodo!==undefined){
      todos.pop(selectedTodo)
      res.status(200).json({message:'todo item deleted'});

    }
    else{
      res.status(404).json({message:'todo item not found'});
    }


  });
  app.use((req, res, next) => {
    res.status(404).send();
  });

  
  app.listen(3004);
  module.exports = app;